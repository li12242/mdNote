# Python with VTK

VTK short for "The Visualization Toolkit"

使用VTK完成数据可视化，可视化的目的是把数据转换成图元（graphics primitives），继而再把图元渲染（render）为图像（image）。这句话涵盖了可视化的两大过程：Data Transformation（数据转换） 和 Rendering（渲染）

source -> filter -> Mapper -> Actor -> Renderer -> Render window -> interactor

# 数据转化为图元

为了从面向对象的角度描述Data Transformation，在多数时候，vtk将数据的描述、储存方式和处理方式进行了结合和抽象，封装成各个Algorithm类。这些Algorithm的对象（又叫Process Objects）相互连接使用，就描述了一个数据转换的流程，称为“pipeline”。根据在pipeline中所起不同作用，这些Algorithm类的对象又分为三类：

1. source
2. filter
3. mapper

## souce

VTK provides various source classes that can be used to construct simple geometric objects like spheres, cubes, cones, cylinders, etc...

* 根据参数产生数据的，叫procedural objects
* 连接到外部数据的，叫reader objects

## Filters

Takes data as input, modifies it in some way, and returns the modified data

for example

* select data of a particular size, strength, intensity, etc
* process 2D/3D images or polygon meshes
* generate geometric objects from data

## Mappers

* Maps data to graphics primitives (points, lines, or triangles) that can be displayed by the renderer

* 一般的Mapper对象会将数据转换为图元（graphics primitives），它们一方面是Data Transformation的终结，另一方面连接着Graphics Model，标志着图形绘制的开始。

* The mapper you will use most in the labs is
vtkPolyDataMapper

* vtkPolyDataMapper maps polygonal data
(vtkPolyData) to graphics primitives

# 把图元（graphics primitives）渲染为图像 - Rendering

这个过程的概念相对简单。我们记住渲染一个3D场景的几大要素就可以了，这些要素组成了“Graphics Model”。在vtk中，它们体现为：

1. vtkCamera - 相机、代表我们的视角
2. vtkActor - 演员，代表场景中的一个物体。我们用Mapper来表示其几何构成，用Property来描述其透明度、光照属性等
3. vtkLight - 灯光
4. vtkRenderer - 综合灯光、相机、演员来产生图像
5. vtkRenderWindow - 将产生的图像放在屏幕上展示


## Actors

vtkActor represents an object (geometry and properties) in a rendering scene

## Rendering
The process of converting 3D graphics primitives (points, lines, triangles, etc), a specification for lights and materials, and a camera view into an 2D image that can be displayed on the screen

* vtkRenderer controls the rendering process for actors and scenes

* Under the hood, VTK uses OpenGL for rendering

## Render window

The vtkRenderWindow class creates a window for renderers to draw into

## Interactors

* The vtkRenderWindowInteractor class provides platform-independent window interaction via the mouse and keyboard
* Allows you to rotate/zoom/pan the camera, select and manipulate actors, etc
* Also handles time events

# example

```python
#Source
import vtk
# Generate polygon data for a cube
cube = vtk.vtkCubeSource()

# Create a mapper for the cube data
cube_mapper = vtk.vtkPolyDataMapper()
cube_mapper.SetInput(cube.GetOutput())

# Connect the mapper to an actor
cube_actor = vtk.vtkActor() cube_actor.SetMapper(cube_mapper) cube_actor.GetProperty().SetColor(1.0, 0.0, 0.0)

# Create a renderer and add the cube actor to it
renderer = vtk.vtkRenderer()
renderer.SetBackground(0.0, 0.0, 0.0)
renderer.AddActor(cube_actor)

# Create a render window
render_window = vtk.vtkRenderWindow() render_window.SetWindowName("Simple VTK scene") render_window.SetSize(400, 400) render_window.AddRenderer(renderer)

# Create an interactor
interactor = vtk.vtkRenderWindowInteractor() interactor.SetRenderWindow(render_window)
# Initialize the interactor and start the
# rendering loop
interactor.Initialize()
render_window.Render()
interactor.Start()

```
