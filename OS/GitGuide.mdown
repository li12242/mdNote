# Git Guide

## 1.特性

1. 在 Git 中的绝大多数操作都只需要访问本地文件和资源，不用连网。但如果用 CVCS 的话，差不多所有操作都需要连接网络。因为 Git 在本地磁盘上就保存着所有当前项目的历史更新，所以处理起来速度飞快。
2. 多数操作仅添加数据，常用的 Git 操作大多仅仅是把数据添加到数据库。
3. 任何一个文件，在 Git 内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）
4. 管理项目时，文件流转的三个工作区域：Git 的工作目录，暂存区域，以及本地仓库
5. 本地仓库，每个项目的 Git 目录，是用来保存元数据和对象数据库的地方
6. 工作目录，从项目中取出某个版本的所有文件和目录，用以开始后续工作的目录。这些文件实际上都是从 Git 目录中的压缩对象数据库中提取出来的，接下来就可以在工作目录中对这些文件进行编辑
7. 暂存区域只不过是个简单的文件，一般都放在 Git 目录中。有时候人们会把这个文件叫做索引文件，不过标准说法还是叫暂存区域
8. 基本工作流程

在工作目录中修改某些文件 =>> 对修改后的文件进行快照，保存到暂存区域 =>> 提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中

9. 可以从文件所处的位置来判断状态

## 2.概念

### 2.1.仓库

每个仓库可以简单理解成一个目录，这个目录里面的所有文件都通过Git来实现版本管理，Git都能跟踪并记录在该目录中发生的所有更新。

![](http://static.open-open.com/lib/uploadImg/20150309/20150309161425_664.jpg)

1. git init 命令建立一个仓库
2. git add <file> 把该文件添加到待提交区（暂存区），这时的更新已经从 WorkSpace 保存到了 Stage 中
3. git commit -m 来提交更新，更新已经又从Stage保存到了Local Repo中

    `注意，只有被add到暂存区的更新才会被提交进入repo`

4. git diff 来查看WorkSpace和Stage情况，把更新add到Stage中，diff就不会有任何输出

### 2.2.撤销

#### 2.2.1.撤销WorkSpace中的更新

git checkout -- <file> 来撤销WorkSpace中的更新

#### 2.2.2.撤销Stage中的更新

git reset HEAD <file> 把暂存区的更新移出到WorkSpace中

#### 2.2.3.撤销repo中的更新

撤销repo中的更新之前，使用 `git log` 查看commit的历史记录

```
commit 5jioe21i2o13j21ij5jj4i32jo432h3hh21i3j213215
Author: li12242 <li12242                com>
Date:   Sat  Dec  27 22:57:22  2014 +0800

    add mulit function in calc.py
```

要撤销"add mulit function in calc.py"这个提交，有两种方式：使用HEAD指针和使用commit id

Git 中，有一个HEAD指针指向当前分支中最新的提交，在上面的例子中HEAD就是对应 5jioe21i2o13j21ij5jj4i32jo432h3hh21i3j213215（commit id）这次提交。所以可以使用下面的命令来撤销"add mulit function in calc.py"这个提交。

    git rest --hard HEAD^

或

    git rest --hard 5jioe21i2o13j21ij5jj4i32jo432h3hh21i3j213215

当前版本，我们使用"HEAD^"，那么再前一个版本可以使用"HEAD^^"，如果想回退到更早的提交，可以使用"HEAD~n"。（也就是，HEAD^=HEAD~1，HEAD^^=HEAD~2）

再次查看，发现"add mulit function in calc.py"的commit已经被撤销了，查看"calc.py"文件，"multi函数"也已经被删除了。


#### 2.2.4.恢复撤销repo

`git reflog` 会记录这个仓库中所有分支的所有更新记录，包括已经撤销的更新。

    git reset --hard HEAD@{1}

或

    git reset --hard 1a72f49

#### 2.2.5.–hard和–soft

* –hard：撤销并删除相应的更新
* –soft：撤销相应的更新，把这些更新的内容放的Stage中

## 3.分支

### 3.1.分支创建、删除与合并

查看当前存在分支

    git branch

创建并切换branch

    git checkout -b <branch name>

分支的删除

    git branch -d <branch name>

将本分支合并到master分支，合并后，即可删除相应分支

    git merge master

删除远端分支并更新本地分支显示内容

    git push origin --delete <branch name>
    git fetch -p

### 3.2.分支操作

stash和diff操作

使用stash来保存未完成的工作

## 4.git忽略文件

有些文件是我们并不想加入也无需被添加到 Git 管理中，同时也不希望他出现在未跟踪列表中。例如在编译过程中生成的 o 文件。 ".gitignore" 文件可以达到这个效果。

### 4.1.全局与局部 `.gitignore` 文件

通过修改全局配置 git config 中的 excludesfile 指定全局忽略文件。设置方法：

    $git config --global core.excludesfile ~/.gitignore

修改 `~/.gitignore` 这个文件将作用于所有 git 项目，并且作用于项目实例中的所有被跟踪的目录。比如说我们可以在该文件中添加 \*.o 来忽略所有 .o 文件。

忽略文件默认为当前目录的 .gitignore ，但它只作用于当前目录下。上面说到，在全局的 `.gitignore` 文件中添加 \*.o 会忽略所有目录下产生的 .o 文件，但在当前目录下的 `.gitignore` 中添加 \*.o 却只能忽略当前目录下的 .o 文件。

### 4.2.语法

* 所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略；
* 可以使用标准的 glob 模式匹配。 * 匹配模式最后跟反斜杠（/）说明要忽略的是目录。 * 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。

glob 模式匹配：

* 星号（\*）匹配零个或多个任意字符
* [abc] 匹配任何一个列在方括号中的字符
* 问号（?）只匹配一个任意字符；
* [0-9a-zA-Z] 在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配
* \ 转义字符


## 2.规范

1. 不提交垃圾文件
2. 不提交不能编译运行的代码到master分支
3. 多用本地分支

    * 特性分支：可以每开始一个新功能或bugfix时就创建一个新分支，改完后合并到master。比如：newidea/issue90
    * 每个新版本也要用一个新分支，这样如果需要改老版本的bug，那么可以很轻松地切换到老分支，改完后再切回新分支。
    * 长期分支：大型项目中，用分支管理不同层次的稳定性，master/develop；
